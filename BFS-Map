import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

public class BFS {

    private LinkedList<Integer> map [];
    private boolean visit[];
    private int NodeNum;
    private Queue<Integer> queue;
     BFS(int nodenum)
    {
        NodeNum = nodenum;
        visit = new boolean[NodeNum];
        map = new LinkedList[NodeNum];
        queue = new LinkedList<>(); //队列用链表创建
        for (int i = 0; i < NodeNum; i++) {
            map[i] = new LinkedList<Integer>();
        }
    }
    void addEdge(int point1 ,int point2)
    {
        map[point1].add(point2);
    }
    void Search(int SearchNode)
    {

       queue.add(SearchNode);
       visit[SearchNode] = true;
       while (!queue.isEmpty())
       {
            int frist = queue.poll();
            visit[frist] = true;
           System.out.print(frist+" ");
           Iterator it = map[frist].iterator();
           while(it.hasNext())
           {
               int number =(int) it.next();
               if(visit[number]!=true)
               {
                   visit[number] = true;
                   queue.add(number);
               }
           }
       }

    }
    public static void main(String[] args) {

        BFS bfs =  new BFS(5);
        bfs.addEdge(0,1);
        bfs.addEdge(0,2);bfs.addEdge(1,2);
        bfs.addEdge(2,3);bfs.addEdge(1,0);
        bfs.addEdge(3,4);
        bfs.Search(0);

    }
}
