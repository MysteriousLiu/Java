/*
*   粗糙的拓扑排序
*/
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

/**
 * 拓扑排序
 */
public class TopologicalSort {

    private  int In[] ;
    private  boolean record[];
    private LinkedList <Integer>[] map ;
    private Queue queue;

    TopologicalSort(int nodeNum)
    {
        In = new int[nodeNum];
        record = new boolean[nodeNum];
        map = new LinkedList[nodeNum];
        queue = new LinkedList();
        for (int i = 0; i < nodeNum; i++) {
            map[i] = new LinkedList<>();
        }
    }
    // 以上均为初始化部分 
    
    //存储图
    void addEdge(int start, int end) 
    {
        map[start].add(end);
    }
    //拓扑排序
    void topologicalsort() 
    {
        refresh(); //初始化入度记录
       while(confirm()==false)
       {
           refresh();
           int number = getZeroNode();
           if(number!=-1)
           {
               record[number] = true;
               In[number] = -1;
               queue.add(number);
               deletNode(number);
           }
           else
           {
               break;
           }
       }
        for (int i = 0; i < record.length; i++) {
            if(record[i]!=true)
            {
                queue.add(i);
            }
        }

        Iterator it = queue.iterator();
       while(it.hasNext())
       {
           System.out.print(it.next()+" ");
       }
    }
    //获取空节点的位置
    int getZeroNode() 
    {
        int location = 0;
        for (int i = 0; i < In.length; i++) {
            if((In[i] == 0)&&(record[i] ==false))
            {
              return i;
            }
        }
        return -1;
    }
    //清除空入度节点
    void deletNode(int node) 
    {
        map[node].clear();
    }
    //确认图不空
    boolean confirm() 
    {
        for (int i = 0; i < map.length; i++) {
            if(!map[i].isEmpty())
            {
                return false;
            }
        }
        return true;
    }
    //刷新入度节点
    void refresh() 
    {
        for (int i = 0; i < In.length; i++) {
            In[i] = 0;
        }
        for (int i = 0; i < map.length; i++) {
            Iterator it  = map[i].iterator();
            for (Iterator iter = it; iter.hasNext(); ) {
                Integer in =(int) iter.next();
                    In[in]++;
            }
        }
    }
    public static void main(String[] args) {

        TopologicalSort ts = new TopologicalSort(7);
        ts.addEdge(0,1);
        ts.addEdge(0,2);
        ts.addEdge(0,3);
        ts.addEdge(1,3);
        ts.addEdge(1,4);
        ts.addEdge(4,3);
        ts.addEdge(4,6);
        ts.addEdge(3,2);
        ts.addEdge(3,5);
        ts.addEdge(3,6);
        ts.addEdge(2,5);
        ts.addEdge(6,5);

        ts.topologicalsort();


    }
}
